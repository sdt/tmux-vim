#!/bin/bash

#------------------------------------------------------------------------------
# tvim
#
# Persistent vim panes within tmux.
#
# Usage:
#
#   tvim [file [files...]]
#
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Copyright (c) 2012, Stephen Thirlwall
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# * The name of Stephen Thirlwall may not be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL STEPHEN THIRLWALL BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#------------------------------------------------------------------------------

_tvim_window_id() {
    tmux lsp -a -F '#{pane_id}=#{window_index}' | grep ^$TMUX_PANE= | cut -d= -f2
}

# _tvim_store key value
# - stores key/value pair in tmux environment
# - appends window id to key so this is a per-window setting
# - much thanks to Romain Francoise for help with this!
_tvim_store() {
    tmux set-environment "${1}_$( _tvim_window_id )" "$2"
}

# _tvim_fetch key
# - retrieves value from tmux environment
# - appends window id to key so this is a per-window setting
# - much thanks to Romain Francoise for help with this!
_tvim_fetch() {
    tmux show-environment | grep "^${1}_$( _tvim_window_id )=" | cut -d= -f2-
}

_tvim_fetch_or_store() {
    if [[ $# -gt 1 ]]; then
        _tvim_store "$@"
    else
        _tvim_fetch "$@"
    fi
}

_tvim_pane_id() {
    _tvim_fetch_or_store tmux_vim_pane "$@"
}

_tvim_last_dir() {
    _tvim_fetch_or_store tmux_vim_dir "$@"
}

# _tvim_send_keys [keystrokes...]
# - sends keystrokes to the vim instance created by tvim
# - keystroke syntax is the same as tmux send-keys
_tvim_send_keys() {
    tmux send-keys -t $( _tvim_pane_id ) "$@"
}

_tvim_is_running() {
    local pane_id=$( _tvim_pane_id )
    [[ -n $pane_id ]] && tmux lsp -F '#{pane_id}' | grep -q ^$pane_id$
}

# _tvim_tmux_version
# - return the current tmux version
# - only works for tmux >= 1.5 (but we already checked that)
_tvim_tmux_version() {
    tmux -V | cut -d' ' -f2
}

# _tvim_pre_flight_checks
# - make sure all requirements are okay before continuing
_tvim_pre_flight_checks() {
    # Check that tmux is actually running
    if [[ -z "$TMUX" ]]; then
        echo tmux session not detected 1>&2
        return 1
    fi

    # Check that tmux supports the -V command (>= v1.5)
    if ! tmux -V 1>/dev/null 2>/dev/null ; then
        echo tmux 1.6 or greater is required 1>&2
        return 1
    fi

    # Check tmux is v1.6 or greater
    if [[ $( _tvim_tmux_version ) < 1.6 ]]; then
        echo tmux 1.6 or greater is required 1>&2
        return 1
    fi

    return 0
}

# _tvim_op <op> <file>
# - does _tvim_send_keys :$op space $file
# - escapes spaces correctly in $file
_tvim_op() {
    # Backslash escape all spaces in the file name
    _tvim_send_keys :$1 space "${2// /\\ }" enter
}

# _tvim_start [number-of-panes]
# - split a new tmux pane and start vim in it
# - the pane id is stored as tvim_pane, using _tvim_store
_tvim_start() {
    if _tvim_is_running; then
        # TVIM already exists - try to select that pane
        tmux select-pane -t $( _tvim_pane_id ) && return

        # If we get here, that pane no longer exists, so fall thru
        # (shouldn't happen)
    fi

    local tvim_pane_split=${TVIM_SPLIT:-'HORIZONTAL'}

    if [ ${tvim_pane_split} == 'HORIZONTAL' ];then
        local split_method='h'
        #TODO: change client_height to client_width when tmux 1.7 arrives
        local screen_width=$( tmux lsc -t $TMUX_PANE -F '#{client_height}' )
        local shell_width=${TVIM_SHELL_WIDTH:-132}
        local width_left=$[ $screen_width - $shell_width ]
        if [ $width_left -lt 80 ];then
            local split_width=80
        else
            local split_width=$width_left
        fi
        local split_size=${split_width}
    else
        local split_method='v'
        local split_height=${TVIM_SHELL_HEIGHT:-15}
        local split_size=${split_height}
    fi

    local vim_args=$TVIM_VIM_ARGS

    # Split a new pane, start vim in it, and record the pane index
    local tvim_pane=$(tmux split-window -P -$split_method -l $split_size \
                        "exec vim $vim_args")

    # Now convert the pane index into a global persistent id
    # 0:1.1: [100x88] [history 0/10000, 0 bytes] %2
    # ^^^^^ $tvim_pane                  pane_id  ^^
    _tvim_pane_id $(tmux lsp -a | grep ^${tvim_pane}: | grep -o '%[0-9]\+')
    _tvim_last_dir "$PWD"

    if [ ${tvim_pane_split} != 'HORIZONTAL' ]; then
        tmux swap-pane -UD
    fi
}

# tvim [files...]
# - if no existing tvim instance is running, a new one is spawned
# - opens the listed files inside the tvim instance
tvim() {
    [ -f "$HOME/.tvimrc" ] && source "$HOME/.tvimrc"

    _tvim_pre_flight_checks || exit 1
    _tvim_start
    _tvim_send_keys escape  # make sure we're in command mode

    if [[ $# -gt 0 ]]; then

        # If we are now in a different directory than $TDIR, we want to make
        # vim switch to this directory temporarily before opening the files.
        # This obviates any relative path computations.
        [[ "$PWD" != "$( _tvim_last_dir )" ]] && _tvim_op cd "$PWD"

        # Rather than :edit each file in turn, :badd each file into a new
        # buffer, and then finally switch to the last one with :buffer.
        # This is to handle the situation where the current buffer is unsaved,
        # and an :edit command will cause vim to prompt the user to save,
        # abandon or cancel.
        # If we just :edit each file, things just don't work out naturally;
        # cancel works, but yes/no end up with only the first file opened.
        # Errant escape keys cause the whole open to just silently fail.
        # This approach pushes the user interaction right to the end.
        for file in "$@"; do
            _tvim_op badd "$file"   # load a buffer for each file
        done

        [[ "$PWD" != "$( _tvim_last_dir )" ]] && _tvim_op cd -

        _tvim_op buffer "${!#}"       # switch to the final file
    fi

    tmux select-pane -t $( _tvim_pane_id )
}

tvim "$@"

